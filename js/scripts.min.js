!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=54)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(8),i=n(29),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function u(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))}function l(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!==e&&void 0!==e)if("object"!==(void 0===e?"undefined":r(e))&&(e=[e]),s(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===(void 0===n?"undefined":r(n))?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)c(arguments[o],n);return t},extend:function(e,t,n){return c(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0,t.extend=u,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}if(!a.test(e))return e;return e.replace(i,s)},t.isEmpty=function(e){return!e&&0!==e||!(!f(e)||0!==e.length)},t.createFrame=function(e){var t=u({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},i=/[&<>"'`=]/g,a=/[&<>"'`=]/;function s(e){return o[e]}function u(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var l=Object.prototype.toString;t.toString=l;var c=function(e){return"function"==typeof e};c(/x/)&&(t.isFunction=c=function(e){return"function"==typeof e&&"[object Function]"===l.call(e)}),t.isFunction=c;var f=Array.isArray||function(e){return!(!e||"object"!==(void 0===e?"undefined":r(e)))&&"[object Array]"===l.call(e)};t.isArray=f},function(e,t,n){"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];function o(e,t){var n=t&&t.loc,i=void 0,a=void 0;n&&(e+=" - "+(i=n.start.line)+":"+(a=n.start.column));for(var s=Error.prototype.constructor.call(this,e),u=0;u<r.length;u++)this[r[u]]=s[r[u]];Error.captureStackTrace&&Error.captureStackTrace(this,o);try{n&&(this.lineNumber=i,Object.defineProperty?Object.defineProperty(this,"column",{value:a,enumerable:!0}):this.column=a)}catch(e){}}o.prototype=new Error,t.default=o,e.exports=t.default},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(26),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=n(7):void 0!==t&&(s=n(7)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(i)}),e.exports=u}).call(this,n(27))},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(24);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(0),o=n(25),i=n(23),a=n(22),s=n(21),u=n(6),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(20);e.exports=function(e){return new Promise(function(t,c){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(e.url)||(p=new window.XDomainRequest,h="onload",g=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var m=e.auth.username||"",v=e.auth.password||"";d.Authorization="Basic "+l(m+":"+v)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||g)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onerror=function(){c(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=n(19),T=(e.withCredentials||s(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;T&&(d[e.xsrfHeaderName]=T)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=l;var o=n(1),i=r(n(2)),a=n(49),s=n(41),u=r(n(39));t.VERSION="4.0.11";t.COMPILER_REVISION=7;t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};function l(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},a.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}l.prototype={constructor:l,logger:u.default,log:u.default.log,registerHelper:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new i.default("Arg not supported with multiple helpers");o.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===o.toString.call(e))o.extend(this.partials,e);else{if(void 0===t)throw new i.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new i.default("Arg not supported with multiple decorators");o.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]}};var c=u.default.log;t.log=c,t.createFrame=o.createFrame,t.logger=u.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.URL="https://public-api.adsbexchange.com/VirtualRadar/AircraftList.json",t.FLIGHT_DAT={src:1,feeds:[{id:1,name:"From Consolidator",polarPlot:!1}],srcFeed:1,showSil:!0,showFlg:!0,showPic:!0,flgH:20,flgW:85,acList:[]},t.FLIGHT_DATA={src:1,feeds:[{id:1,name:"From Consolidator",polarPlot:!1}],srcFeed:1,showSil:!0,showFlg:!0,showPic:!0,flgH:20,flgW:85,acList:[{Id:4666379,Rcvr:1,HasSig:!1,Icao:"47340B",Bad:!1,Reg:"HA-LPK",FSeen:"/Date(1525911700974)/",TSecs:2261,CMsgs:1154,Alt:34975,GAlt:34789,InHg:29.7342529,AltT:0,Call:"WZZ801",Lat:45.173409,Long:22.212681,PosTime:1525913962061,Mlat:!1,Tisb:!1,Spd:418,Trak:139,TrkH:!1,Type:"A320",Mdl:"Airbus A320 232",Man:"Airbus",CNum:"3143",From:"LROP Henri Coandă, Bucharest, Romania",To:"LWSK Skopje Alexander the Great, Macedonia",Op:"Wizz Air",OpIcao:"WZZ",Sqk:"4213",Help:!1,Vsi:0,VsiT:0,Dst:148.28,Brng:71.9,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Hungary",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2007"},{Id:4221111,Rcvr:1,HasSig:!1,Icao:"4068B7",Bad:!1,Reg:"G-ZBAE",FSeen:"/Date(1525910716335)/",TSecs:3245,CMsgs:738,Alt:35950,GAlt:35764,InHg:29.7342529,AltT:0,TAlt:36e3,Call:"TCX109",Lat:43.937721,Long:21.2885,PosTime:1525913910140,Mlat:!1,Tisb:!1,Spd:452,Trak:322,TrkH:!1,Type:"A321",Mdl:"Airbus A321 231SL",Man:"Airbus",CNum:"5606",From:"EGKK London Gatwick, United Kingdom",To:"EGAA Belfast, United Kingdom",Op:"Monarch Airlines",OpIcao:"MON",Sqk:"2202",Help:!1,Vsi:-64,VsiT:0,Dst:115.97,Brng:142.9,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"United Kingdom",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:4,Year:"2013"},{Id:5258677,Rcvr:1,HasSig:!0,Sig:14,Icao:"503DB5",Bad:!1,Reg:"LY-VEH",FSeen:"/Date(1525910124712)/",TSecs:3837,CMsgs:547,Alt:32e3,GAlt:31844,InHg:29.7637787,AltT:0,Call:"TCX469",Lat:44.270759,Long:18.116321,PosTime:1525913950546,Mlat:!1,Tisb:!1,Spd:467.2,Trak:309.8,TrkH:!1,Type:"A321",Mdl:"Airbus A321 231",Man:"Airbus",CNum:"1366",From:"LTAI Antalya, Turkey",To:"EGNX East Midlands, Nottingham, United Kingdom",Op:"Thomas Cook Airlines",OpIcao:"TCX",Sqk:"3240",Help:!1,Vsi:64,VsiT:0,Dst:190.57,Brng:253.8,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Lithuania",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2000"},{Id:4838403,Rcvr:1,HasSig:!1,Icao:"49D403",Bad:!1,FSeen:"/Date(1525909202684)/",TSecs:4759,CMsgs:2384,Alt:35e3,GAlt:34814,InHg:29.7342529,AltT:0,Call:"TVS1216",Lat:42.896759,Long:22.86989,PosTime:1525913962061,Mlat:!1,Tisb:!1,Spd:441,Trak:145,TrkH:!1,Sqk:"1412",Help:!1,Vsi:0,VsiT:0,Dst:286.85,Brng:135.8,WTC:0,Species:0,EngType:0,EngMount:0,Mil:!1,Cou:"Czech Republic",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2},{Id:4967886,Rcvr:1,HasSig:!1,Icao:"4BCDCE",Bad:!1,Reg:"TC-SNN",FSeen:"/Date(1525908190264)/",TSecs:5771,CMsgs:2860,Alt:36975,GAlt:36789,InHg:29.7342529,AltT:0,Call:"SXS2L",Lat:43.999649,Long:21.51046,PosTime:1525913961921,Mlat:!1,Tisb:!1,Spd:432,Trak:137,TrkH:!1,Type:"B738",Mdl:"Boeing 737NG 8HC/W",Man:"Boeing",CNum:"40775",From:"EDLP Paderborn Lippstadt, Germany",To:"LTAI Antalya, Turkey",Op:"SunExpress",OpIcao:"SXS",Sqk:"7620",Help:!1,Vsi:0,VsiT:0,Dst:122.36,Brng:134.2,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Turkey",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2010"},{Id:11407729,Rcvr:1,HasSig:!1,Icao:"AE1171",Bad:!1,Reg:"02-1099",FSeen:"/Date(1525907101596)/",TSecs:6860,CMsgs:3669,Alt:29e3,GAlt:28814,InHg:29.7342529,AltT:0,Call:"RCH889",Lat:46.4557,Long:20.820801,PosTime:1525913132517,Mlat:!1,PosStale:!0,Tisb:!1,Spd:440,Trak:133,TrkH:!1,Type:"C17",Mdl:"Boeing C-17A Globemaster III",Man:"Boeing",CNum:"P99",Op:"United States Air Force",OpIcao:"USAF",Sqk:"7601",Help:!1,Vsi:18,VsiT:0,Dst:189.78,Brng:9.4,WTC:3,Species:1,Engines:"4",EngType:3,EngMount:0,Mil:!0,Cou:"United States",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2},{Id:7569515,Rcvr:1,HasSig:!1,Icao:"73806B",Bad:!1,Reg:"4X-EKS",FSeen:"/Date(1525905298663)/",TSecs:8663,CMsgs:4474,Alt:35e3,GAlt:34814,InHg:29.7342529,AltT:0,Call:"ELY314",Lat:43.990421,Long:21.525681,PosTime:1525913955921,Mlat:!1,Tisb:!1,Spd:457,Trak:137,TrkH:!1,Type:"B738",Mdl:"Boeing 737NG 8HX/W",Man:"Boeing",CNum:"36433",From:"EGGW London Luton, United Kingdom",To:"LLBG Ben Gurion, Tel Aviv, Israel",Op:"El Al Israel Airlines",OpIcao:"ELY",Sqk:"4711",Help:!1,Vsi:0,VsiT:0,Dst:123.95,Brng:134.2,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Israel",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2008"},{Id:4661081,Rcvr:1,HasSig:!1,Icao:"471F59",Bad:!1,Reg:"HA-LWR",FSeen:"/Date(1525902093812)/",TSecs:11868,CMsgs:5495,Alt:11175,GAlt:10989,InHg:29.7342529,AltT:0,Call:"WZZ2494",Lat:46.991364,Long:18.864723,PosTime:1525913961921,Mlat:!1,Tisb:!1,Spd:322,Trak:58.2,TrkH:!1,Type:"A320",Mdl:"Airbus A320 232SL",Man:"Airbus",CNum:"5604",From:"GCTS Tenerife South, Tenerife Island, Spain",To:"LHBP Budapest Ferenc Liszt, Hungary",Op:"Wizz Air",OpIcao:"WZZ",Sqk:"1000",Help:!1,Vsi:-1408,VsiT:0,Dst:274.31,Brng:334.6,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Hungary",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2013"}],totalAc:6196,lastDv:"636614317141065404",shtTrlSec:65,stm:1525913962077}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.altitude=t,this.direction=n}},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(4);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(0),o=n(16),i=n(5),a=n(3),s=n(15),u=n(14);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",s=0,u=r;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&t>>8-s%1*8)){if((n=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r,o,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var l,c=[],f=!1,d=-1;function p(){f&&l&&(f=!1,l.length?c=l.concat(c):d=-1,c.length&&h())}function h(){if(!f){var e=u(p);f=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,f=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new g(e,t)),1!==c.length||f||u(h)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(3),o=n(0),i=n(18),a=n(17);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(0),o=n(8),i=n(28),a=n(3);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(a);u.Axios=i,u.create=function(e){return s(r.merge(a,e))},u.Cancel=n(4),u.CancelToken=n(13),u.isCancel=n(5),u.all=function(e){return Promise.all(e)},u.spread=n(12),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dataService=t.geoService=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(i(n(31)),i(n(11)),n(10));function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function e(){a(this,e)}return r(e,[{key:"getUserLocation",value:function(e,t,n){"geolocation"in navigator?(console.log("about to get location..."),navigator.geolocation.getCurrentPosition(function(t){var n={lat:t.coords.latitude.toFixed(6),lng:t.coords.longitude.toFixed(6)};e(n)},t)):n()}}]),e}(),u=function(){function e(){a(this,e)}return r(e,[{key:"getFlightData",value:async function(e){return o.FLIGHT_DATA}}]),e}();t.geoService=new s,t.dataService=new u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e<180?"east-bound":"west-bound"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e<180?"./img/east-bound.png":"./img/west-bound.png"}},function(e,t,n){"use strict";var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":o(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";(function(n){t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default}).call(this,n(35))},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=u.COMPILER_REVISION;if(t!==n){if(t<n){var r=u.REVISION_CHANGES[n],o=u.REVISION_CHANGES[t];throw new s.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+o+").")}throw new s.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new s.default("No environment passed to template");if(!e||!e.main)throw new s.default("Unknown template object: "+(void 0===e?"undefined":r(e)));e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n={strict:function(e,t){if(!(t in e))throw new s.default('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var n=e.length,r=0;r<n;r++)if(e[r]&&null!=e[r][t])return e[r][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:i.escapeExpression,invokePartial:function(n,r,o){o.hash&&(r=i.extend({},r,o.hash),o.ids&&(o.ids[0]=!0));n=t.VM.resolvePartial.call(this,n,r,o);var a=t.VM.invokePartial.call(this,n,r,o);null==a&&t.compile&&(o.partials[o.name]=t.compile(n,e.compilerOptions,t),a=o.partials[o.name](r,o));if(null!=a){if(o.indent){for(var u=a.split("\n"),l=0,c=u.length;l<c&&(u[l]||l+1!==c);l++)u[l]=o.indent+u[l];a=u.join("\n")}return a}throw new s.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,o){var i=this.programs[e],a=this.fn(e);return t||o||r||n?i=l(this,e,a,t,n,r,o):i||(i=this.programs[e]=l(this,e,a)),i},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=i.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function o(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=r.data;o._setup(r),!r.partial&&e.useData&&(i=function(e,t){t&&"root"in t||((t=t?u.createFrame(t):{}).root=e);return t}(t,i));var a=void 0,s=e.useBlockParams?[]:void 0;function l(t){return""+e.main(n,t,n.helpers,n.partials,i,s,a)}return e.useDepths&&(a=r.depths?t!=r.depths[0]?[t].concat(r.depths):r.depths:[t]),(l=f(e.main,l,n,r.depths||[],i,s))(t,r)}return o.isTop=!0,o._setup=function(r){r.partial?(n.helpers=r.helpers,n.partials=r.partials,n.decorators=r.decorators):(n.helpers=n.merge(r.helpers,t.helpers),e.usePartial&&(n.partials=n.merge(r.partials,t.partials)),(e.usePartial||e.useDecorators)&&(n.decorators=n.merge(r.decorators,t.decorators)))},o._child=function(t,r,o,i){if(e.useBlockParams&&!o)throw new s.default("must pass block params");if(e.useDepths&&!i)throw new s.default("must pass parent depths");return l(n,t,e[t],r,0,o,i)},o},t.wrapProgram=l,t.resolvePartial=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var o=void 0;n.fn&&n.fn!==c&&function(){n.data=u.createFrame(n.data);var e=n.fn;o=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=u.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=i.extend({},n.partials,e.partials))}();void 0===e&&o&&(e=o);if(void 0===e)throw new s.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=c;var o,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(1)),a=n(2),s=(o=a)&&o.__esModule?o:{default:o},u=n(9);function l(e,t,n,r,o,i,a){function s(t){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a;return!a||t==a[0]||t===e.nullContext&&null===a[0]||(s=[t].concat(a)),n(e,t,e.helpers,e.partials,o.data||r,i&&[o.blockParams].concat(i),s)}return(s=f(n,s,e,a,r,i)).program=t,s.depth=a?a.length:0,s.blockParams=o||0,s}function c(){return""}function f(e,t,n,r,o,a){if(e.decorator){var s={};t=e.decorator(t,s,n,r&&r[0],o,a,r),i.extend(t,s)}return t}},function(e,t,n){"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(1),o={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(o.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=o.lookupLevel(e),"undefined"!=typeof console&&o.lookupLevel(o.level)<=e){var t=o.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];console[t].apply(console,r)}}};t.default=o,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(1);t.default=function(e){e.registerDecorator("inline",function(e,t,n,o){var i=e;return t.partials||(t.partials={},i=function(o,i){var a=n.partials;n.partials=r.extend({},a,t.partials);var s=e(o,i);return n.partials=a,s}),t.partials[o.args[0]]=o.fn,i})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){i.default(e)};var r,o=n(40),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(1);t.default=function(e){e.registerHelper("with",function(e,t){r.isFunction(e)&&(e=e.call(this));var n=t.fn;if(r.isEmpty(e))return t.inverse(this);var o=t.data;return t.data&&t.ids&&((o=r.createFrame(t.data)).contextPath=r.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:o,blockParams:r.blockParams([e],[o&&o.contextPath])})})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",function(e,t){return e&&e[t]})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var o=1;null!=n.hash.level?o=n.hash.level:n.data&&null!=n.data.level&&(o=n.data.level),t[0]=o,e.log.apply(e,t)})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(1);t.default=function(e){e.registerHelper("if",function(e,t){return r.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||r.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,n){return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},e.exports=t.default},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var o,i=n(1),a=n(2),s=(o=a)&&o.__esModule?o:{default:o};t.default=function(e){e.registerHelper("each",function(e,t){if(!t)throw new s.default("Must pass iterator to #each");var n=t.fn,o=t.inverse,a=0,u="",l=void 0,c=void 0;function f(t,r,o){l&&(l.key=t,l.index=r,l.first=0===r,l.last=!!o,c&&(l.contextPath=c+t)),u+=n(e[t],{data:l,blockParams:i.blockParams([e[t],t],[c+t,null])})}if(t.data&&t.ids&&(c=i.appendContextPath(t.data.contextPath,t.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),t.data&&(l=i.createFrame(t.data)),e&&"object"===(void 0===e?"undefined":r(e)))if(i.isArray(e))for(var d=e.length;a<d;a++)a in e&&f(a,a,a===e.length-1);else{var p=void 0;for(var h in e)e.hasOwnProperty(h)&&(void 0!==p&&f(p,a-1),p=h,a++);void 0!==p&&f(p,a-1,!0)}return 0===a&&(u=o(this)),u})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(1);t.default=function(e){e.registerHelper("blockHelperMissing",function(t,n){var o=n.inverse,i=n.fn;if(!0===t)return i(this);if(!1===t||null==t)return o(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):o(this);if(n.data&&n.ids){var a=r.createFrame(n.data);a.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:a}}return i(t,n)})},e.exports=t.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){o.default(e),i.default(e),a.default(e),s.default(e),u.default(e),l.default(e),c.default(e)};var o=r(n(48)),i=r(n(47)),a=r(n(46)),s=r(n(45)),u=r(n(44)),l=r(n(43)),c=r(n(42))},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var i=o(n(9)),a=r(n(38)),s=r(n(2)),u=o(n(1)),l=o(n(37)),c=r(n(36));function f(){var e=new i.HandlebarsEnvironment;return u.extend(e,i),e.SafeString=a.default,e.Exception=s.default,e.Utils=u,e.escapeExpression=u.escapeExpression,e.VM=l,e.template=function(t){return l.template(t,e)},e}var d=f();d.create=f,c.default(d),d.default=d,t.default=d,e.exports=t.default},function(e,t,n){"use strict";e.exports=n(50).default},function(e,t,n){var r=n(51);function o(e){return e&&(e.__esModule?e.default:e)}e.exports=(r.default||r).template({1:function(e,t,n,r,o){var i;return null!=(i=n.if.call(null!=t?t:e.nullContext||{},null!=t?t.Gnd:t,{name:"if",hash:{},fn:e.program(2,o,0),inverse:e.program(4,o,0),data:o}))?i:""},2:function(e,t,n,r,o){return""},4:function(e,t,r,i,a){var s=null!=t?t:e.nullContext||{},u=e.escapeExpression,l=e.lambda;return'    <div class="flight grid-container">\n        <div class="image-column">\n            <img class="flight-icon" src="'+u(o(n(34)).call(s,null!=t?t.Trak:t,{name:"getDirectionImage",hash:{},data:a}))+'" />\n        </div>\n        <div class="info-column">\n            <p class="flight-id">Flight ID: '+u(l(null!=t?t.Id:t,t))+'</p>\n            <p class="flight-info">Altitude: '+u(l(null!=t?t.Alt:t,t))+'</p>\n            <p class="flight-info">'+u(o(n(33)).call(s,null!=t?t.Trak:t,{name:"getDirection",hash:{},data:a}))+"</p>\n        </div>\n    </div>\n"},compiler:[7,">= 4.0.0"],main:function(e,t,n,r,o){var i;return null!=(i=n.each.call(null!=t?t:e.nullContext||{},null!=t?t.acList:t,{name:"each",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o}))?i:""},useData:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(52),a=(r=i)&&r.__esModule?r:{default:r};var s=document.querySelector("#flights-container"),u=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return o(e,[{key:"loading",value:function(){s.innerHTML="<h3>Loading...</h3>",console.log("Loading...")}},{key:"displayPermissionsError",value:function(){s.innerHTML="<h3>Location has been denied: cannot display data</h3>",console.log("permission error")}},{key:"displayList",value:function(e){JSON.stringify(e.acList)!==JSON.stringify([])?(console.log("Printing list..."),s.innerHTML=(0,a.default)(e)):(s.innerHTML="<h3>Currently no flights in the area</h3>",console.log("Currently no flights in the area"))}}]),e}());t.default=u},function(e,t,n){"use strict";var r,o=n(53),i=(r=o)&&r.__esModule?r:{default:r},a=n(32);var s=function(e){console.log(e),a.dataService.getFlightData(e).then(function(e){i.default.displayList(e)}).catch(function(e){console.log(e)})},u=function(e){i.default.displayPermissionsError()},l=function(){console.log("Location services not supported by this browser/OS")};onload=function(){i.default.loading(),setTimeout(function(){a.geoService.getUserLocation(s,u,l)},5e3)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,