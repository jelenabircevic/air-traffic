!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=31)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(6),i=n(26),s=Object.prototype.toString;function a(e){return"[object Array]"===s.call(e)}function u(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))}function c(e){return"[object Function]"===s.call(e)}function l(e,t){if(null!==e&&void 0!==e)if("object"!==(void 0===e?"undefined":r(e))&&(e=[e]),a(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===(void 0===n?"undefined":r(n))?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)l(arguments[o],n);return t},extend:function(e,t,n){return l(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(23),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:("undefined"!=typeof XMLHttpRequest?a=n(5):void 0!==t&&(a=n(5)),a),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(i)}),e.exports=u}).call(this,n(24))},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(21);e.exports=function(e,t,n,o,i){var s=new Error(e);return r(s,t,n,o,i)}},function(e,t,n){"use strict";var r=n(0),o=n(22),i=n(20),s=n(19),a=n(18),u=n(4),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(17);e.exports=function(e){return new Promise(function(t,l){var f=e.data,p=e.headers;r.isFormData(f)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,h="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",T=e.auth.password||"";p.Authorization="Basic "+c(m+":"+T)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,l,r),d=null}},d.onerror=function(){l(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var y=n(16),S=(e.withCredentials||a(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;S&&(p[e.xsrfHeaderName]=S)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),l(e),d=null)}),void 0===f&&(f=null),d.send(f)})}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.URL="https://public-api.adsbexchange.com/VirtualRadar/AircraftList.json",t.FLIGHT_DATA={src:1,feeds:[{id:1,name:"From Consolidator",polarPlot:!1}],srcFeed:1,showSil:!0,showFlg:!0,showPic:!0,flgH:20,flgW:85,acList:[{Id:4666379,Rcvr:1,HasSig:!1,Icao:"47340B",Bad:!1,Reg:"HA-LPK",FSeen:"/Date(1525911700974)/",TSecs:2261,CMsgs:1154,Alt:34975,GAlt:34789,InHg:29.7342529,AltT:0,Call:"WZZ801",Lat:45.173409,Long:22.212681,PosTime:1525913962061,Mlat:!1,Tisb:!1,Spd:418,Trak:139,TrkH:!1,Type:"A320",Mdl:"Airbus A320 232",Man:"Airbus",CNum:"3143",From:"LROP Henri CoandÄƒ, Bucharest, Romania",To:"LWSK Skopje Alexander the Great, Macedonia",Op:"Wizz Air",OpIcao:"WZZ",Sqk:"4213",Help:!1,Vsi:0,VsiT:0,Dst:148.28,Brng:71.9,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Hungary",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2007"},{Id:4221111,Rcvr:1,HasSig:!1,Icao:"4068B7",Bad:!1,Reg:"G-ZBAE",FSeen:"/Date(1525910716335)/",TSecs:3245,CMsgs:738,Alt:35950,GAlt:35764,InHg:29.7342529,AltT:0,TAlt:36e3,Call:"TCX109",Lat:43.937721,Long:21.2885,PosTime:1525913910140,Mlat:!1,Tisb:!1,Spd:452,Trak:322,TrkH:!1,Type:"A321",Mdl:"Airbus A321 231SL",Man:"Airbus",CNum:"5606",From:"EGKK London Gatwick, United Kingdom",To:"EGAA Belfast, United Kingdom",Op:"Monarch Airlines",OpIcao:"MON",Sqk:"2202",Help:!1,Vsi:-64,VsiT:0,Dst:115.97,Brng:142.9,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"United Kingdom",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:4,Year:"2013"},{Id:5258677,Rcvr:1,HasSig:!0,Sig:14,Icao:"503DB5",Bad:!1,Reg:"LY-VEH",FSeen:"/Date(1525910124712)/",TSecs:3837,CMsgs:547,Alt:32e3,GAlt:31844,InHg:29.7637787,AltT:0,Call:"TCX469",Lat:44.270759,Long:18.116321,PosTime:1525913950546,Mlat:!1,Tisb:!1,Spd:467.2,Trak:309.8,TrkH:!1,Type:"A321",Mdl:"Airbus A321 231",Man:"Airbus",CNum:"1366",From:"LTAI Antalya, Turkey",To:"EGNX East Midlands, Nottingham, United Kingdom",Op:"Thomas Cook Airlines",OpIcao:"TCX",Sqk:"3240",Help:!1,Vsi:64,VsiT:0,Dst:190.57,Brng:253.8,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Lithuania",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2000"},{Id:4838403,Rcvr:1,HasSig:!1,Icao:"49D403",Bad:!1,FSeen:"/Date(1525909202684)/",TSecs:4759,CMsgs:2384,Alt:35e3,GAlt:34814,InHg:29.7342529,AltT:0,Call:"TVS1216",Lat:42.896759,Long:22.86989,PosTime:1525913962061,Mlat:!1,Tisb:!1,Spd:441,Trak:145,TrkH:!1,Sqk:"1412",Help:!1,Vsi:0,VsiT:0,Dst:286.85,Brng:135.8,WTC:0,Species:0,EngType:0,EngMount:0,Mil:!1,Cou:"Czech Republic",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2},{Id:4967886,Rcvr:1,HasSig:!1,Icao:"4BCDCE",Bad:!1,Reg:"TC-SNN",FSeen:"/Date(1525908190264)/",TSecs:5771,CMsgs:2860,Alt:36975,GAlt:36789,InHg:29.7342529,AltT:0,Call:"SXS2L",Lat:43.999649,Long:21.51046,PosTime:1525913961921,Mlat:!1,Tisb:!1,Spd:432,Trak:137,TrkH:!1,Type:"B738",Mdl:"Boeing 737NG 8HC/W",Man:"Boeing",CNum:"40775",From:"EDLP Paderborn Lippstadt, Germany",To:"LTAI Antalya, Turkey",Op:"SunExpress",OpIcao:"SXS",Sqk:"7620",Help:!1,Vsi:0,VsiT:0,Dst:122.36,Brng:134.2,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Turkey",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2010"},{Id:11407729,Rcvr:1,HasSig:!1,Icao:"AE1171",Bad:!1,Reg:"02-1099",FSeen:"/Date(1525907101596)/",TSecs:6860,CMsgs:3669,Alt:29e3,GAlt:28814,InHg:29.7342529,AltT:0,Call:"RCH889",Lat:46.4557,Long:20.820801,PosTime:1525913132517,Mlat:!1,PosStale:!0,Tisb:!1,Spd:440,Trak:133,TrkH:!1,Type:"C17",Mdl:"Boeing C-17A Globemaster III",Man:"Boeing",CNum:"P99",Op:"United States Air Force",OpIcao:"USAF",Sqk:"7601",Help:!1,Vsi:18,VsiT:0,Dst:189.78,Brng:9.4,WTC:3,Species:1,Engines:"4",EngType:3,EngMount:0,Mil:!0,Cou:"United States",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2},{Id:7569515,Rcvr:1,HasSig:!1,Icao:"73806B",Bad:!1,Reg:"4X-EKS",FSeen:"/Date(1525905298663)/",TSecs:8663,CMsgs:4474,Alt:35e3,GAlt:34814,InHg:29.7342529,AltT:0,Call:"ELY314",Lat:43.990421,Long:21.525681,PosTime:1525913955921,Mlat:!1,Tisb:!1,Spd:457,Trak:137,TrkH:!1,Type:"B738",Mdl:"Boeing 737NG 8HX/W",Man:"Boeing",CNum:"36433",From:"EGGW London Luton, United Kingdom",To:"LLBG Ben Gurion, Tel Aviv, Israel",Op:"El Al Israel Airlines",OpIcao:"ELY",Sqk:"4711",Help:!1,Vsi:0,VsiT:0,Dst:123.95,Brng:134.2,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Israel",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2008"},{Id:4661081,Rcvr:1,HasSig:!1,Icao:"471F59",Bad:!1,Reg:"HA-LWR",FSeen:"/Date(1525902093812)/",TSecs:11868,CMsgs:5495,Alt:11175,GAlt:10989,InHg:29.7342529,AltT:0,Call:"WZZ2494",Lat:46.991364,Long:18.864723,PosTime:1525913961921,Mlat:!1,Tisb:!1,Spd:322,Trak:58.2,TrkH:!1,Type:"A320",Mdl:"Airbus A320 232SL",Man:"Airbus",CNum:"5604",From:"GCTS Tenerife South, Tenerife Island, Spain",To:"LHBP Budapest Ferenc Liszt, Hungary",Op:"Wizz Air",OpIcao:"WZZ",Sqk:"1000",Help:!1,Vsi:-1408,VsiT:0,Dst:274.31,Brng:334.6,WTC:2,Species:1,Engines:"2",EngType:3,EngMount:0,Mil:!1,Cou:"Hungary",HasPic:!1,Interested:!1,FlightsCount:0,Gnd:!1,SpdTyp:0,CallSus:!1,Trt:2,Year:"2013"}],totalAc:6196,lastDv:"636614317141065404",shtTrlSec:65,stm:1525913962077}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.altitude=t,this.direction=n}},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(2);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(0),o=n(13),i=n(3),s=n(1),a=n(12),u=n(11);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),s="",a=0,u=r;i.charAt(0|a)||(u="=",a%1);s+=u.charAt(63&t>>8-a%1*8)){if((n=i.charCodeAt(a+=.75))>255)throw new o;t=t<<8|n}return s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,s={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var s=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r,o,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var c,l=[],f=!1,p=-1;function d(){f&&c&&(f=!1,c.length?l=c.concat(l):p=-1,l.length&&h())}function h(){if(!f){var e=u(d);f=!0;for(var t=l.length;t;){for(c=l,l=[];++p<t;)c&&c[p].run();p=-1,t=l.length}c=null,f=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new g(e,t)),1!==l.length||f||u(h)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=n(15),s=n(14);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(0),o=n(6),i=n(25),s=n(1);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=a(s);u.Axios=i,u.create=function(e){return a(r.merge(s,e))},u.Cancel=n(2),u.CancelToken=n(10),u.isCancel=n(3),u.all=function(e){return Promise.all(e)},u.spread=n(9),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dataService=t.geoService=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(i(n(28)),i(n(8)),n(7));function i(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(){function e(){s(this,e)}return r(e,[{key:"getUserLocation",value:function(e,t,n){"geolocation"in navigator?(console.log("about to get location..."),navigator.geolocation.getCurrentPosition(function(t){var n={lat:t.coords.latitude.toFixed(6),lng:t.coords.longitude.toFixed(6)};e(n)},t)):n()}}]),e}(),u=function(){function e(){s(this,e)}return r(e,[{key:"getFlightData",value:async function(e){return o.FLIGHT_DATA}}]),e}();t.geoService=new a,t.dataService=new u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"loading",value:function(){document.querySelector("#app").innerHTML="<h3>Loading...</h3>",console.log("Loading...")}},{key:"stopLoading",value:function(){document.querySelector("#app").innerHTML=""}},{key:"displayList",value:function(e){this.stopLoading();var t=document.createElement("ul");document.querySelector("#app").appendChild(t),t=document.querySelector("ul"),console.log("ul element: "+t),JSON.stringify(e.acList)!==JSON.stringify([])?e.acList.forEach(function(e){var n=document.createElement("li"),r=document.createTextNode(e.Id+", "+e.Alt+", "+(e.Trak<180?"eastbound":"westbound"));n.appendChild(r),t.appendChild(n)}):console.log("Currently no flights in the area")}}]),e}());t.default=o},function(e,t,n){"use strict";var r,o=n(30),i=(r=o)&&r.__esModule?r:{default:r},s=n(29);var a=function(e){console.log(e),s.dataService.getFlightData(e).then(function(e){i.default.displayList(e)}).catch(function(e){console.log(e)})},u=function(e){console.log(e)},c=function(){console.log("Location services not supported by this browser/OS")};onload=function(){i.default.loading(),setTimeout(function(){s.geoService.getUserLocation(a,u,c)},5e3)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,